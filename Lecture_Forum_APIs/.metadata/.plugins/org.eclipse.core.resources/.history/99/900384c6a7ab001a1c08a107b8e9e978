package com.lecture.controller;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lecture.dto.Replies;
import com.lecture.dto.Threads;
import com.lecture.dto.TransactionStatus;
import com.lecture.dto.Users;
import com.lecture.repository.RepliesRepository;
import com.lecture.repository.ThreadRepository;
import com.lecture.repository.UserRepository;

@RestController
@RequestMapping("/api/")
public class ForumController {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private ThreadRepository threadRepository;

	@Autowired
	private RepliesRepository repliesRepository;

	@GetMapping("/user/{username}")
	public Users getUserDetails(@PathVariable String username) {
		return userRepository.findAll().parallelStream()
				.filter(innerEl -> innerEl.getUsername().equalsIgnoreCase(username)).findFirst().orElse(null);
	}
	
	@GetMapping("/users/{userID}")
	public Users getUserDetails(@PathVariable Integer userID) {
		return userRepository.findAll().parallelStream()
				.filter(innerEl -> innerEl.getUserID().equals(userID)).findFirst().orElse(null);
	}

	@GetMapping("/threads/{userID}")
	public List<Threads> getThreadsOfUser(@PathVariable Integer userID) {
		return threadRepository.findAll().parallelStream().filter(innerEl -> innerEl.getUserID().equals(userID))
				.collect(Collectors.toList());
	}

	@GetMapping("/threads/reply/{threadID}")
	public List<Replies> getRepliesToThread(@PathVariable Integer threadID) {
		return repliesRepository.findAll().parallelStream().filter(innerEl -> innerEl.getThreadID().equals(threadID))
				.collect(Collectors.toList());
	}
	
	@GetMapping("/threads")
	public List<Threads> getAllThreads(){
		return threadRepository.findAll();
	}

	@PostMapping("/threads")
	public TransactionStatus insertThread(@RequestBody Threads thread) {
		TransactionStatus status = new TransactionStatus();
		threadRepository.save(thread);
		status.setStatus(true);
		return status;
	}

	@PostMapping("/threads/reply")
	public TransactionStatus insertReply(@RequestBody Replies reply) {
		reply.setDateTime(new Date());
		TransactionStatus status = new TransactionStatus();
		repliesRepository.save(reply);
		status.setStatus(true);
		return status;
	}

	@PostMapping("/createUser")
	public TransactionStatus insertUser(@RequestBody Users user) {
		TransactionStatus status = new TransactionStatus();
		userRepository.save(user);
		status.setStatus(true);
		return status;
	}

	@PutMapping("/threads")
	public TransactionStatus updateThread(@RequestBody Threads thread) {
		TransactionStatus status = new TransactionStatus();
		threadRepository.save(thread);
		status.setStatus(true);
		return status;
	}

	@PutMapping("/threads/reply")
	public TransactionStatus updateThread(@RequestBody Replies reply) {
		reply.setDateTime(new Date());
		TransactionStatus status = new TransactionStatus();
		repliesRepository.save(reply);
		status.setStatus(true);
		return status;
	}

	@DeleteMapping("/threads/{threadID}")
	public TransactionStatus deleteThread(@PathVariable Integer threadID) {
		threadRepository.deleteById(threadID);
		TransactionStatus status = new TransactionStatus();
		status.setStatus(true);
		return status;
	}

	@DeleteMapping("/threads/reply/{replyID}")
	public TransactionStatus deleteReply(@PathVariable Integer replyID) {
		repliesRepository.deleteById(replyID);
		TransactionStatus status = new TransactionStatus();
		status.setStatus(true);
		return status;
	}

	@DeleteMapping("/user/{userID}")
	public TransactionStatus deleteUser(@PathVariable Integer userID) {
		userRepository.deleteById(userID);
		TransactionStatus status = new TransactionStatus();
		status.setStatus(true);
		return status;
	}
	
}
